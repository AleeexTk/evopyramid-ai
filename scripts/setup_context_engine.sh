#!/bin/bash
set -euo pipefail

log() {
  echo "[setup] $*"
}

log "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Quantum Context Engine"

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"
log "üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_ROOT"

if ! command -v python3 >/dev/null 2>&1; then
  echo "‚ùå Python 3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" >&2
  exit 1
fi
log "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω Python $(python3 --version)"

if [ ! -d ".venv" ]; then
  log "üì¶ –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
  python3 -m venv .venv
fi

# shellcheck disable=SC1091
source .venv/bin/activate
log "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"

log "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º pip"
python -m pip install --upgrade pip

declare -a REQUIREMENTS_FILES=("requirements.txt" "requirements_context.txt")
found_requirements=false
for req_file in "${REQUIREMENTS_FILES[@]}"; do
  if [ -f "$req_file" ]; then
    found_requirements=true
    log "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ $req_file"
    python -m pip install -r "$req_file"
  else
    log "‚ö†Ô∏è $req_file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
  fi
done

if [ "$found_requirements" = false ]; then
  echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (requirements.txt –∏–ª–∏ requirements_context.txt)" >&2
  exit 1
fi

log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª—é—á–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
missing_packages=()
for package in pytest pytest_asyncio aiofiles xmltodict; do
  if ! python -c "import $package" >/dev/null 2>&1; then
    missing_packages+=("$package")
  fi
done

if [ ${#missing_packages[@]} -gt 0 ]; then
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã: ${missing_packages[*]}" >&2
  exit 1
fi

log "üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Quantum Context Engine"
for component in \
  apps/core/context/quantum_analyzer.py \
  apps/core/memory/pyramid_memory.py \
  apps/core/integration/context_engine.py \
  tests/context/test_quantum_analyzer.py \
  tests/context/test_pyramid_memory.py; do
  if [ ! -f "$component" ]; then
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç $component" >&2
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ scripts/integrate_quantum_context.sh –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π" >&2
    exit 1
  fi
done

log "üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Quantum Context Engine"
set +e
python -m pytest tests/context/ -v
test_status=$?
set -e

if [ $test_status -eq 0 ]; then
  log "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
else
  log "‚ö†Ô∏è –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥ $test_status)"
fi

log "üéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Quantum Context Engine"
set +e
python - <<'PYCODE'
import asyncio
import importlib
import sys
from pathlib import Path

PROJECT_ROOT = Path(__file__).resolve().parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.append(str(PROJECT_ROOT))

spec = importlib.util.find_spec("apps.core.integration.context_engine")
if spec is None:
    print("‚ùå –ú–æ–¥—É–ª—å apps.core.integration.context_engine –Ω–µ –Ω–∞–π–¥–µ–Ω")
else:
    module = importlib.import_module("apps.core.integration.context_engine")
    demo_integration = getattr(module, "demo_integration", None)
    if demo_integration is None:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è demo_integration –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥—É–ª–µ")
    else:
        try:
            asyncio.run(demo_integration())
        except Exception as exc:  # noqa: BLE001 - –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {exc}")
PYCODE
demo_status=$?
set -e

if [ $demo_status -eq 0 ]; then
  log "‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
else
  log "‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥ $demo_status)"
fi

if [ ! -f "evo_config.json" ]; then
  log "‚öôÔ∏è –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é evo_config.json"
  cat >evo_config.json <<'JSON'
{
  "system": {
    "name": "EvoPyramid-AI",
    "version": "1.0.0",
    "creator": "AlexCreator"
  },
  "components": {
    "quantum_context_engine": {
      "enabled": true,
      "auto_analyze": true
    },
    "pyramid_memory": {
      "enabled": true
    }
  }
}
JSON
fi

log "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
log "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/integration/QUANTUM_CONTEXT_INTEGRATION.md"
